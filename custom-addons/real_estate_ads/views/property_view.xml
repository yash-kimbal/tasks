<?xml version="1.0" encoding="utf-8" ?>
<odoo>
    <data>

        <record id="action_property_view_offers" model="ir.actions.act_window">
            <field name="name">Property</field>
            <field name="res_model">estate.property.offer</field>
            <field name="view_mode">tree,form</field>
            <field name="domain">[('property_id','=',active_id)]</field>
        </record>

<!--        Tree View-->
<!--        Here record means a new entry of a view in the database. -->
<!--        Here id is used to refer to this view in down action ref value assigned.-->
        <record id="estate_property_tree_view" model="ir.ui.view">
            <!--            name: A unique identifier for the view.-->
<!--            model: Specifies the model that this view is associated with.-->
            <field name="name">estate.property.tree</field>
            <field name="model">estate.property</field><!--   Tells the model it follow, that is here its Tree View-->
            <field name="arch" type="xml">
<!--                These are fields in the tree shown at front view.-->
                <tree>
                    <field name="name"/>
                    <field name="type_id"/>
                    <field name="postcode"/>
                    <field name="data_availability"/>
                    <field name="expected_price"/>
                    <field name="best_offer"/>
                    <field name="selling_price"/>
                    <field name="state" widget="badge"/>
                </tree>
            </field>
        </record>


<!--        Pivot View-->
<!--        The Pivot View provides a comprehensive overview of the data,
grouping it by specified row categories, displaying measures,
and allowing additional dimensions through columns.-->
<!--        In the Pivot View, fields are categorized into three types: row, measure, and column.-->
<!--    Row: Represents the rows or categories by which the data is grouped.-->
<!--    Measure: Represents the numerical values or metrics to be aggregated.-->
<!--    Column: Represents the columns or additional dimensions.-->
        <record id="estate_property_pivot_view" model="ir.ui.view">
            <field name="name">estate.property.pivot</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <pivot>
                    <field name="name" type="row"/>
                    <field name="selling_price" type="measure"/>
                    <field name="expected_price" type="measure"/>
                    <field name="facades" type="measure"/>
                    <field name="bedrooms" type="measure"/>
                </pivot>
            </field>
        </record>


<!--        Graph View-->
<!--    The graph view provides options to switch between various chart types such as bar chart, line chart, and pie chart.-->
<!--    It supports different cumulative options: descending and ascending.-->
           <record id="estate_property_graph_view" model="ir.ui.view">
            <field name="name">estate.property.graph</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <graph>
                    <field name="name"/>
                    <field name="selling_price" type="measure"/>

                </graph>
            </field>
        </record>

<!--        SEARCH View-->
        <record id="estate_property_search_view" model="ir.ui.view">
            <field name="name">estate.property.search</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <search>
                    <field name="name"/>
                    <field name="state"/>
                    <field name="postcode"/>
                    <field name="buyer_id"/>
                    <filter string="New" name="new_state" domain="[('state','=','new')]"/>
                    <filter string="Sold" name="sold_state" domain="[('state','=','sold')]"/>
                    <filter string="Received Offer" name="received_state" domain="[('state','=','received')]"/>
                    <filter string="Accepted Offer" name="accepted_state" domain="[('state','=','accepted')]"/>
                    <separator/>
                    <group expand="0" string="Group By">
                        <filter string="Status" name="group_by_state" context="{'group_by':'state'}"/>
                    </group>
<!--                    <searchpanel>-->
<!--                        <field name="state" icon="fa-filter" groupby="group_by_state" limit="0"/>-->
<!--                    </searchpanel>-->
                </search>
            </field>
        </record>

<!--        Kanban View-->
<!--Within the Kanban view, a template is created using QWeb tags.
The template includes fields such as the property name and tags.-->
        <record id="estate_property_kanban_view" model="ir.ui.view">
            <field name="name">estate.property.kanban</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <kanban default_group_by="state" on_create="quick_create" quick_create_view="real_estate_ads.quick_create_estate_property_form_view">
                    <field name="name"/>
                    <field name="state"/>
                    <field name="postcode"/>
                    <field name="buyer_id"/>
                    <templates>
                        <t t-name="kanban-box">
                            <div class="oe_kanban_global_click">
                                <div class="oe_kanban_details">
                                <strong>
                                    <field name="name"/>
                                </strong>
                                <div class="o_kanban_tags_section">
                                    <field name="tag_ids" widget="many2many_tags" options="{'color_field':'color'}" />
                                </div>

                                <div class="o_kanban_record_bottom">
                                    <div class="oe_kanban_bottom_left">
                                        <field name="offer_count"/> Offer(s)
                                    </div>
                                </div>
                            </div>
                            </div>

                        </t>
                    </templates>
                </kanban>
            </field>
        </record>

<!--        QUICK CREATE UNDER KANBAN VIEW (When clicking New Button)-->
        <record id="quick_create_estate_property_form_view" model="ir.ui.view">
            <field name="name">estate.property.form</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <form>
                    <group>
                        <field name="name"/>
                    </group>
                </form>
            </field>
        </record>

<!--        Calender View-->
         <record id="estate_property_calendar_view" model="ir.ui.view">
            <field name="name">estate.property.calendar</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <calendar date_start="data_availability" string="Properties" mode="month" event_open_popup="true" quick_add="false">
                        <field name="name"/>
                        <field name="data_availability"/>
                        <field name="postcode"/>
                </calendar>
            </field>
        </record>


<!--Form-View-->
        <record id="estate_property_form_view" model="ir.ui.view">
            <!--            name: A unique identifier for the view.-->
<!--            model: Specifies the model that this view is associated with.-->
            <field name="name">estate.property.form</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <form>
<!--                    Creating Buttons and Actions:-->
<!--    Two buttons, "Accept" and "Decline," are added to the property view.
These buttons will trigger actions with specific logic.-->
<!--    Buttons are declared with the <button> tag, and the type attribute is set to "object."
Each button has a corresponding method in the model (action_accept and action_decline).-->
                    <header>
<!--                        object type is used when we have a method defined in the property.py (in model)-->
                        <button name="action_sold" type="object" string="Sold" class="btn btn-primary"/>
                        <button name="action_cancel" type="object" string="Cancel" class="btn btn-danger"/>

<!--                        Status Bar Widget:-->
<!--    A status bar widget is added to the property view to visually represent the status in a more user-friendly way.-->
<!--    The status field is set to invisible to hide it from the view, and the status bar widget is used to display the states.-->
<!--                        STATE-->
                        <field name="state" widget="statusbar"/>
                    </header>
                    <sheet>
                        <div class="oe_button_box" name="button_box">
<!--                            Smart Button with Action:-->
<!--    A smart button is added to the property view, providing a count of associated offers. The button is linked to an action.-->
<!--    The action is defined in XML and includes a domain to filter offers related to the specific property.-->
<!--                            SMART BUTTON-->
<!--                            <button class="oe_stat_button" name="%(real_estate_ads.action_property_view_offers)d" type="action">-->
<!--                                <field name="offer_count" string="Offers" widget="statinfo"/>-->
<!--                            </button>-->
<!--                            SMART BUTTON-->
<!--                            Icon for Smart Button:-->
<!--    Added an icon attribute to the smart button, making it visually appealing.-->
<!--    Used Font Awesome icons, and in this case, an icon related to the offer, such as a handshake.-->
                            <button class="oe_stat_button" name="action_property_view_offers" type="object" icon="fa-handshake-o">
                                <field name="offer_count" string="Offers" widget="statinfo"/>
                            </button>
                        </div>
                        <group>
                            <field name="name" widget="char_emojis"/>
                            <field name="tag_ids" widget="many2many_tags" options="{'color_field':'color'}"/>
                            <group>

<!--Updating the Property View:-->
<!--    The status field is added to the property view,
allowing users to view and edit the status directly from the property form.-->
                                <field name="state"/>
                                <field name="type_id"/>
                                <field name="postcode"/>
                                <field name="data_availability"/>
                            </group>
                            <group>
                                <field name="expected_price"/>
                                <field name="best_offer"/>
                                <field name="selling_price"/>
                            </group>
                        </group>
                        <notebook>
                                <page string="Description">
                                    <group>
                                        <field name="description"/>
                                        <field name="bedrooms"/>
                                        <field name="living_area"/>
                                        <field name="facades"/>
                                        <field name="garage" widget="boolean_toggle"/>
                                        <field name="garden"/>
<!--                                Conditional Visibility:-->
<!--    Demonstrated the use of the attrs attribute to conditionally hide fields based on the value of another field.-->
<!--    For example, hiding the "Garden Area" and "Orientation" fields when the "Gardening" option is set to false.-->
                                        <field name="garden_area" attrs="{'invisible': [('garden','=',False)]}"/>
                                        <field name="garden_orientation" attrs="{'invisible': [('garden','=',False)]}" widget="selection_badge"/>
                                        <field name="total_area"/>
                                    </group>
                                </page>
                                <page string="Offers">
                                    <field name="offer_ids">
                                        <tree editable="bottom" decoration-success="status == 'accepted'" decoration-danger="status == 'refused'">
                                            <field name="price"/>
                                            <field name="partner_id"/>
                                            <field name="creation_date" invisible="1"/>
                                            <field name="validity"/>
                                            <field name="deadline" widget="remaining_days"/>
                                            <field name="status"/>

<!--                                            Accept and Decline Buttons:-->
<!--    Added "Accept" and "Decline" buttons to the offer view.-->
<!--    Associated methods (action_accept and action_decline) to handle the logic when these buttons are clicked.-->
<!--    Used icons and styles to make the buttons visually distinguishable.-->
                                            <button name="action_accept_offer" type="object" icon="fa-check" string="Accept"/>
                                            <button name="action_decline_offer" type="object" icon="fa-times" string="Decline"/>
                                        </tree>
                                    </field>
                                </page>
                            <page string="Other Info">
<!--                                We can have a buyer ID who eventually bought this property.
And we can have. Salesman. Sales. I'd. These two fields are not available in our model and we can add them here.
There will be many to one. -->
                                <group>
                                    <field name="sales_id" widget="many2one_avatar_user"/>
                                    <field name="buyer_id"/>
                                    <field name="phone" widget="phone"/>
                                </group>
                            </page>
                            </notebook>
                    </sheet>
                </form>
            </field>
        </record>

<!--        Action View-->
<!--    record with id="action_property": Defines an action for the "estate.property" model.-->
<!--        name: A descriptive name for the action.-->
<!--        res_model: Specifies the model associated with the action.-->
<!--        view_mode: Specifies the view modes available for this action (tree and form).-->
<!--        view_id with ref="estate_property_tree_view": Specifies the default view for this action, pointing to the previously defined tree view.-->
<!--        help: Provides a helpful message to be displayed in the UI.-->
        <record id="action_property" model="ir.actions.act_window">
            <field name="name">Property</field>
            <field name="res_model">estate.property</field>
            <field name="view_mode">kanban,graph,calendar,pivot,tree,form</field>
<!--            This ref="estate_property_tree_view" will be the first view that it will be pointing to.-->
            <field name="view_id" ref="estate_property_kanban_view"/>
            <field name="help" type="html">
                <p class="o_view_nocontent_smiling_face">
                    Create a property to Advertise
                </p>
            </field>
        </record>
    </data>
</odoo>




